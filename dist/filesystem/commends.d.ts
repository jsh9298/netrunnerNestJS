import { MissionsDTO } from "src/savefile/savefile.Dto";
import { SaveFileService } from "src/savefile/savefile.service";
import { FileSystem } from "./filesystemcore/fileSystems";
import { Stack } from "./stack";
import { StackItem } from "./stackItem.interface";
export declare class commends {
    private xmlService;
    fs: FileSystem;
    currentIP: string;
    userIP: string;
    currentUser: string;
    currentpath: string;
    userId: string;
    userLocation: string;
    missionsDTO: any;
    isUserNode: boolean;
    nodelist: Map<string, number>;
    currentNode: number;
    savepoint: number;
    sshhistory: Stack<StackItem>;
    constructor(xmlService: SaveFileService, userId: string, missionsDTO: MissionsDTO, savepoint: number);
    setFs(dirlist: string[], filelist: string[], uSer: string, Ip: string): Promise<void>;
    mkNodeList(): void;
    pwd(): string;
    cd(payload: any): "" | "No such path found";
    ls(payload: any): string;
    help(payload: any): "pwd: 현재위치를 출력합니다 \r\ncd: cd[절대경로 | 현재위치의 하위 경로 | .. ] 위치 이동 명령어입니다.\r\nls: 현재경로에 존재하는 파일, 디렉터리들을 표시합니다.\r\ncp: cp[파일명] 파일을 복제합니다.\n" | "mv: mv[이동시킬 파일명][옮길 경로] 파일을 이동합니다.\r\nrm: rm[파일명 | * ] 현재경로의 파일을 삭제합니다. * 를 사용하면 전부 제거합니다.\r\nmkdir: mkdir[디렉터리명] 디렉터리를 생성합니다.\r\nrmdir: rmdir[디렉터리명] 디렉터리를 삭제합니다.\n" | "cat: cat[파일명] 해당 위치에 존재하는 파일의 내용을 출력합니다.\r\ntouch: touch[파일명] 빈파일을 생성합니다.\r\nvi: vi[파일명] 파일을 생성하거나, 수정 및 저장을 합니다.\r\nscan: scan[CIDR] 현재 미션에서 접근해야할 노드들의 정보를 스캔합니다.\n" | "ssh: ssh[ip주소] 해당주소가 노드중에 존재할경우, 그리고 해당 포트닥 열려있는 경우 이동합니다.exit로 나올수있습니다.\r\niptables: 엄..퀘스트를 확인하세요.\r\nFTPBounce: FTPBounce[21 | 69] ftp포트 해제 \r\nscp: scp[파일명][대상id@대상ip:경로] 파일을 대상ip의 경로로 복사합니다.\n" | "help [1~4]로 입력해주세요." | "이제 없어요.";
    cp(payload: any): string;
    mv(payload: any): string;
    rm(payload: any): string;
    mkdir(payload: any): string;
    rmdir(payload: any): string;
    cat(payload: any): string;
    touch(payload: any): string;
    vi(payload: any): string;
    write(payload: any, context: any): Promise<string>;
    scan(payload: any): string;
    ssh(payload: any): string;
    exit(): "Unknown commands" | "Disconnected";
    iptables(payload: any): string;
    FTPbounce(payload: any): "complete." | "failed." | "Wrong port number";
    scp(payload: any): "Port access denied" | "can't find host" | "complete" | "wrong input";
    porthack(payload: any): string;
    SSHcrack(payload: any): string;
    SMTPoverflow(payload: any): string;
    WebServerWorm(payload: any): string;
    Decypher(payload: any): "true" | "false";
    DECHead(payload: any): "true" | "false";
    loggging(cmd: any, addr: any, name: any, data: any): void;
    checkPortOpen(destIP: any, portNumber: any): boolean;
    calcSubnet(cidraddress: string, ipaddress: string): boolean;
    getKeyByValue(map: Map<string, number>, value: number): string | undefined;
}
